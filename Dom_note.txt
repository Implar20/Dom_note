1.Node类型
	- 一共有12个类型。其中以ELEMENT(1)、ATTRIBUTE(2)、TEXT(3)为主，以类型常量（数字）显示
	- 可以使用nodeType属性来查看节点类型常量
	- nodeName和nodeValu
		- 包含节点的具体信息
		- nodeName的值是元素的标签名
		- nodeValue的值始终是null
	- childNodes
		- 保存着一个NodeList对象，即子节点列表，是一个类数组对象，用于保存一组有序的节点，可以通过索引值来访问这些节点
		- DOM结构的变化能够自动反映在NodeList对象中
		- 访问NodeList中的节点
			- [索引]访问
			- item()方法访问
		- NodeList里面保存的是当前节点的所有子节点(不包含子节点的子节点)，且以文本元素分割，即第一个跟最后一个子节点都是空白的text文本节点（空白字符也属于text节点）
		- NodeList对象有一个length属性，表示的是访问NodeList的那一刻，其中包含的节点数量
		- 可以使用Array.prototype.slice.call(someNode.childNodes, 0)来将其转换为真数组
		- parentNode
			- 该属性指向文档树中的父节点，包含在childNodes列表中的所有节点都有相同的父节点，因此他们的parentNode属性都指向同一个节点
		- previousSibling和nextSibling
			- 兄弟节点。当前节点的前一个节点和后一个节点
			- 列表中的第一个节点的previousSibling和最后一个节点的nextSibling都是null
		- firstChild和lastChild
			- 分别指向父节点的第一个节点和最后一个节点
			- 相当于parentNode.childNodes[0]和parentNode.childNodes[length - 1]
		- hasChildNodes()
			- 在节点包含一个或多个子节点的情况下返回true
	- 操作节点
		- 基于父节点的操作
			- appendChild()
				- 用于向childNode列表的末尾添加一个节点
				- 返回新增的节点
				- 该方法支持的参数类型为DOM对象，而不是string类型
				- 如果传入的节点已经是文档的一部分，那么结果就是将该节点从原来的位置转移到新位置
			- insertBefore()
				- 可以把节点放在NodeList列表的指定位置，即参照节点的前一个位置，成为参照节点的前一个同胞节点(previousSibling)
				- 接受两个参数：要插入的节点和作为参照的节点
				- 返回插入的节点
			- replaceChild()
				- 移除并插入新节点
				- 接受两个参数：要插入的节点和要替换的节点
				- 返回要替换的节点
			- removeChild()
				- 移除节点
				- 接受一个参数：要移除的节点
				- 返回被移除的节点
		- cloneNode()
			- 创建调用这个方法的节点的一个完全相同的副本
			- 接受一个布尔值参数，表示是否进行深复制
				 - true：进行深复制，即复制节点和他的整个子节点树
				 - false：进行浅复制，即只复制节点本身
			- 返回节点副本，返回的节点副本归文档所有，但没有为他指定父节点，所以这个节点副本就成了一个“孤儿”，除非把他添加到文档中
			- 不会复制添加到DOM节点中的js属性，如事件处理程序。这个方法只复制特性、子节点，其他一切都不会复制
		- normalize()
			- 处理文档树中的文本节点
			- 由于解析器的实现或DOM操作等原因，可能会出现文本节点不包含文本，或者接连出现两个文本节点的情况
			- 调用这个方法时，会在该节点的后代节点中查找上述两种情况，如果找到了空文本节点，就删除；如果找到相邻的文本节点，则将它们合并为一个文本节点
2、Document类型
	- JS通过Document类型表示文档。在浏览器中，document对象是HTMLDocument（继承自Document类型）的一个实例，表示整个HTML页面
	- document对象是window对象的一个属性，因此可以将其作为全局对象来访问
	- Document节点的特征：
 		- nodeType的值为9 => Node.DOCUMENT_NODE(9)
		- nodeName的值为”#document“
		- nodeValue的值为null
		- parentNode的值为null
		- ownerDocument的值为null
		- 其子节点可能是一个DocumentType（最多一个）、Element（最多一个）、ProcessingInstruction或Comment
	- 通过document对象，不仅可以取得与页面有关的信息，而且还能操作页面的外观及其底层结构
	- documentElement属性指的是文档对象的根元素，即html
	- doucument对象有一个body属性，直接指向body元素，document.body
	- document.title：包含着title元素中的文本――――显示在浏览器窗口的标题栏或标签页
	- URL、domain、referrer
		- URL包含页面完整的URL
		- domian包含页面的域名
		- referrer包含连接到当前页面的 那个页面 的 URL
	- 查找元素
		- getElementById()
			- 接受一个参数：要取得的元素的ID，字符串形式
			- 如果能找到，则返回该元素，如果不能，则返回null
			- 只返回文档中第一次出现的元素
		- getElementByTagName()
			- 接受一个参数：要取得元素的标签名
			- 返回包含零或多个元素的NodeList。在HTML文档中，返回的是一个HTMLCollection对象
				- namedItem()：可以通过元素的name特性来取得该集合中的项 ，接受的参数为字符串形式
				- 也可以使用方括号表示，里面接受一个字符串形式的name属性值
			- 想取得所有元素，可以传入'*'。在css跟js中'*'一般代表着全部
				- 返回的HTMLCollection中，包含了整个页面的所有元素――――按照出现的顺序排列
		- getElementByName()
			- 返回带有指定name特性的所有元素
			- 接受一个参数：指定的name特性
	- document.implementation:
		- 提供浏览器实现DOM部分的相关信息和功能的对象
		- hasFeature()
			- 接受两个参数：要检测的DOM功能的名称及版本号
			- 如果支持，则返回true
	- 文档写入
		- write()
		- writenln()
			- 以上两个方法都接受一个字符串参数，即要写入到输出流中的文本
			- write()会原样写入、writenln()则会在字符串的末尾加入一个换行符(\n)
		- open()
		- close()
			- 分别是打开和关闭输出流
3、Element类型
	- 提供了对元素标签名、子节点几特性的访问
	- Element节点的特性：
		- nodeType的值为1
		- nodeName的值为元素的标签名
		- nodeValue的值为null
		- parentNode可能是Document或Element
		- 其子节点可能是Element、Text、Comment(注释)等
	- tagName：访问元素的标签名(LI、DIV…)的，也可以使用nodeName属性，这两个属性都会返回相同的值
	- HTML元素
		- 所以HTML元素都由HTMLElement类型表示，不是直接通过这个类型，也是通过他的子类型来表示。
		- HTMLElement类型直接继承自Element并添加了一些属性。添加的这些属性分别对应于每个HTML元素中都存在的下列标准特性
			- id：元素在文档中的唯一标识符
			- title：有关元素的附加说明信息，一般通过工具提示条显示出来
			- lang：元素内容的语言代码，很少使用
			- dir：语言的方向，值为'ltr'(left-to-right，从左至右)或'rtl'(right-to-left，从右至左)，很少使用
			- className：与严肃的class特性对应，即伪元素指定的css类
			- 以上属性都可以获取与设置
			- 可以使用.表示法来获取元素的属性
	- getAttribute()
		- 获取元素的属性
		- 接受一个参数：元素属性的字符串形式
	- setAttribute()
		- 设置元素的属性
		- 接受两个参数：要设置的属性和属性值，均以字符串形式表示
		- 如果要设置的属性已经存在，那么setAttribute()就会替换掉现有的属性
	- removeAttribute()
		- 删除元素的属性
	- attribute属性
		- attribut属性中包含一个NameNodeMap，与NodeList类似，也是一个‘动态’的集合
		- NameNodeMap对象的方法：
			- getNamedItem(name)：返回nodeName属性等于name的节点
			- removeNamedItem(name)：从列表中移除nodeNaem等于name的节点
			- setNamedItem(node)：向列表中添加节点，以节点的nodeName属性为索引，接受参数为DOM对象
			- item(pos)：返回位于数字pos位置处的节点
		- attribute属性包含一些列节点，每个节点的nodeName就是特性的名称，而节点的nodeValue就是特性的值
	- creatElement()
		- 这个方法可以创建元素
		- 接受一个参数：要创建元素的标签名（字符串形式），也可以传入完整的元素标签并包含属性
			- 不能设置动态创建的<iframe>元素的name属性
			- 不能通过表单的reset()方法重设动态创建的<input>元素
			- 动态创建的type属性值为‘reset’的<button>元素重设不了表单
			- 动态创建的一批name相同的单选按钮彼此毫无关系
	- 可以用nodeType来判断第一个子元素是否是文本节点，从而区分浏览器
	- getElementByTagName也可以用来取得元素的子节点，someNode.getElementByTagName == someNode.childNodes
		- 如果元素的子节点中包含其他子节点，那么getElementByTagName也会返回
4、Text类型
	- 文本节点用Text类型表示，包含的是可以照字面解释的纯文本内容，纯文本可以包含转义后的HTML字符，但不能包含HTML代码
	- 特征：
		- nodeType的值为2
		- nodeName的值为‘#text'
		- nodeValue的值为节点所包含的文本
		- parentNode是一个Element
		- 不支持（没有）子节点
	- 可以使用nodeValue属性或data属性访问Text节点中包含的文本，这两个属性中包含的值相同，对nodeValue属性修改，也会通过data反映出来，反之亦然
	- 操作节点的方法：
		- appendDate(text)：将text添加到节点的末尾
		- deleteDate(offset, count)：从offset指定的位置开始删除count个字符
		- insertDate(offset, text)：从offet指定位置插入text
		- replaceData(offset, text)：用text替换从offset指定的位置开始到offset + count为止处的文本
		- splitText(offset)：从offset指定的位置将当前文本节点分成两个文本节点
		- substringData(offset, count)：提取从offset指定的位置开始到offset + count为止处的文本
		- 文本节点还有一个length属性，保存着节点中字符的数目
	- createTextNode()
		- 创建新文本节点
		- 接受一个参数：要插入节点中的文本
5、Comment类型(注释)
	- 特性：
		- nodeType为8
		- nodeName为’#comment‘
		- nodeValue为注释的内容
		- parentNode可能是Document或Element
		- 不支持（没有）子节点
	- 与Text类型继承自相同的基类，所以除splitText()之外的所有字符串操作方法都拥有，可以通过nodeValue和Data属性来获取注释的内容
	- document.createComment()可以用来创建注释节点
	- 要想访问注释节点，一定要保证他是html即文档节点的子节点
6、attr类型
	- 元素的属性在DOM中以Attr来表示
	- 特性：
		- nodeType为2
		- nodeName是特性的名称
		- nodeValue是特性的值
		- parentNode为null
		- 不支持（没有）子节点
	- creatAttribute()可以创建新的属性节点
	
	
	

	
	
1、选择符API
	- querySelector()
		- 接受一个CSS选择符，返回与该模式匹配的第一个元素，如果没有找到就返回null
	- querySelectorAll()
		- 接受一个CSS选择符，返回的是所有匹配的元素的集合，是一个NodeList的实例
		- 返回的值实际上是带有所有属性和方法的NodeList
	- getElementsByClassName()
		- 接受一个参数：一个包含一或多个类名的字符串
		- 返回所有带有指定类的所有元素的NodeList
	- classList属性
		- 时DOMTokenList的实例
		- 方法：
			- add(value)：添加类名
			- contains(value)：表示列表中是否存在给定的值，如果存在则返回true，否则就返回false
			- remove(value)：从列表中删除给定的字符串
			- 如果列表中已经存在给定的值，删除它；如果没有给定的值，添加它
	- readyState
		- loading：正在加载文档
		- complete：已经加载完文档
	- compatMode
		- CSS1Compat：标准模式
		- BackCompat：混杂模式
	- document.head
		- var head = document.head || document.getElementByTagName('head')[0]
	- innerHTML()
		- 在读模式下，返回与调用元素的所有子节点对应的HTML标记（字符串形式）
		- 在写模式下，会根据指定的值创建新的DOM树，然后用这个DOM树完全替换调用元素原本的所有子节点
			- 也可以接受HTML代码
		- window.toStaticHTML()
			- 接受一个参数：HTML字符串
			- 返回一个没有脚本节点和事件处理程序属性的版本
	- outerHTML()
		- 在读模式下，outerHTML返回调用它的元素及所有子节点的HTML标签
		- 在写模式下，outerHTML会根据指定的HTML字符串创建新的DOM子树，然后有这个DOM子树完全替换调用元素
	- insertAdjacentHTML()
		- 接受两个参数：插入位置和要插入的HTML文本，第一个参数必须是下列值：
			- ”beforebegin“：在当前元素之前插入一个紧邻的同辈元素
			- ”afterbegin“：在当前元素之下插入一个新的子元素或在第一个子元素之前再插入新的子元素
			- ”beforeend“：在当前元素之下插入一个新的子元素活在最后一个子元素之后在插入新的子元素
			- ”afterend“：在当前元素之后插入一个紧邻的同辈元素
			- 必须是小写的字符串形式
	- contains()
		- 获取某个节点是否是另一个节点的后代
		- 接受一个参数：要检测的后代节点
		- 如果被检测的节点时调用节点的后代节点，则返回true；否则返回false
	- innerText()
		- 可以操作元素中包含的所有文本内容
		- 读取值时，他会按照由浅入深的顺序，将子文档树中的所有文本拼接起来
		- 写入值时，他会删除元素的所有子节点，插入包含相应文本值的文本节点
	- outerText()
		- 读取模式时，与innerText()没区别
		- 写入模式时，会替换整个元素(当前元素)，包括子节点
	
	
	
	
	
	
	
	
1、访问元素的样式
	- 任何支持style特性的HTML元素再JS中都有一个对应的style属性。这个style对象时CSSStyleDeclaration的实例，包含着通过HTML的style特性指定的所有样式信息。但不包含与外部样式表或潜入样式表经层叠而来的样式
	- 在style特性中指定的任何CSS属性都将表现为这个style对象的相应属性。
	- 对于使用短划线的CSS属性名，必须将其转换为驼峰大小写形式，才能通过JS来访
		- float在Js中是保留字，所以应该写成cssFloat
	- style属性具有的属性：
		- cssText：访问到style特性中的CSS代码
		- length：应用给元素的CSS属性的数量
		- parentRule：表示CSS信息的CSSRule类型
		- getPropertyCSSValue(propertyName)：返回包含给定属性值的CSSValue对象
			- cssText：访问到style特性中的CSS代码
			- cssValueType：数值常量：0表示继承的值，1表示基本的值，2表示值列表，3表示自定义的值
		- getPropertyPriority(propertyName)：如果给定的属性使用了！important设置，则返回‘important’；否则，返回空字符串
		- getPropertyValue(propertyName)：返回给定属性的字符串值
		- item(index)：返回给定位置的CSS属性的名称
		- removeProperty(propertyName)：从样式中删除给定属性
		- setProperty(proertyName, value, priority)：将给定属性设置为相应的值，并加上有限权标志('important'或一个空字符串)
	- document.defaultView
		- getComputedStyle()
			- 接受两个参数：要去的计算样式的元素和一个伪元素字符串(可选)
			- 返回一个CSSStyleDeclaration对象(与style属性的类型相同)，其中包含当前元素的所有计算的样式
			- 即可以取得获取元素的所有style样式
	- 在IE里面获取全部style样式的方法是currentStyle属性
		- currentStyle属性也是CSSStyleDeclaration的实例，包含当前元素全部计算后的样式
	- 所有计算的样式都是只读的，不能修改计算后样式对象中的CSS属性
2、操作样式表
	- 偏移量
		- 包括元素在屏幕上占用的所有可见的空间。
		- 元素的可见大小由其高度、宽度决定，包括所有内边距，滚动条和边框大小（注意，不包括外边距）
		- 获取元素偏移量：
			- offsetHeight：元素在垂直方向上占用的空间大小，以像素计。包括元素的高度、（可见的）水平滚动条的高度、上边框高度和下边框高度
			- offsetWidth：元素在水平方向上占用的空间大小，以像素计。包括元素的宽度、（可见的）垂直滚动条的宽度、左边框宽度和右边框宽度
			- offsetLeft：元素的左外边框至包含元素的左内边框之间的像素距离
			- offsetTop：元素的上外边框至包含元素的上内边框之间的像素距离
		- offsetParent：
			- 保存着offsetLeft和offsetTop的包含元素的引用
			- td的offsetParent是table，而他的ParentNode则是tr
			- 偏移量属性是只读的
	- 客户区大小
		- 指的是元素内容及其内边距所占据的空间大小，即元素内部的空间大小，所以滚动条占用的空间不计算在内
		- clientWidth：
			- 元素内容区宽度加上左右内边距宽度
		- clientHeight：
			- 元素内容去高度加上上下内边距高度
		- 要确定浏览器视口的大小，可以使用document.documentElement或document.body的clientWidth和clientHeight
	- 滚动大小
		- scrollHeight：
			- 在没有滚动条的情况下，元素内容的总高度
		- scrollWidth：
			- 在没有滚动条的情况下，元素内容的总宽度
		- scrollLeft：
			- 被隐藏在内容区域左侧的像素数。通过设置这个属性可以改变元素的滚动位置
		- scrollTop：
			- 被隐藏在内容区域上方的像素数。通过设置这个属性可以改变元素的滚动位置，元素中的内容超出元素上边界的那部分的高度
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		